name: Extension Validation

on:
  pull_request:
  push:
    branches:
      - main
      - 5.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-extensions:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch full history for git diff

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Configure git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "Installing dependencies from requirements.txt:"
          cat scripts/requirements.txt
          pip install -r scripts/requirements.txt
          echo "Verifying installed packages:"
          pip list | grep -E "(jsonschema|requests)"

      - name: Run repository structure validation
        id: structure-validation
        continue-on-error: true
        run: |
          mkdir -p /tmp/validation-reports
          python scripts/check_repository_structure.py \
            > /tmp/validation-reports/repository-structure-report.md

      - name: Get changed files
        run: |
          echo "Event: ${{ github.event_name }}"
          mkdir -p /tmp/validation-reports
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, compare against the base branch
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            echo "Base ref: $BASE_REF"
            git diff --name-only "origin/$BASE_REF"...HEAD > /tmp/validation-reports/changed_files.txt 2>/dev/null
          else
            # For pushes, compare against the previous commit or get all JSON files if it's the first commit
            git diff --name-only HEAD~1 HEAD > /tmp/validation-reports/changed_files.txt 2>/dev/null
          fi
          echo "Changed JSON files:"
          cat /tmp/validation-reports/changed_files.txt

      - name: Run extension validation
        id: extension-validation
        continue-on-error: true
        run: |
          mkdir -p /tmp/validation-reports
          python scripts/check_description_files.py \
            $(cat /tmp/validation-reports/changed_files.txt | tr '\n' ' ') \
            > /tmp/validation-reports/extension-validation-report.md

      - name: Combine validation reports and display summary
        if: always()
        run: |
          mkdir -p /tmp/validation-reports
          if [ -f /tmp/validation-reports/repository-structure-report.md ]; then
            cat /tmp/validation-reports/repository-structure-report.md >> /tmp/validation-reports/validation-report.md
          else
            echo "❌ Repository structure validation report not generated" >> /tmp/validation-reports/validation-report.md
          fi
          echo "" >> /tmp/validation-reports/validation-report.md
          if [ -f /tmp/validation-reports/extension-validation-report.md ]; then
            cat /tmp/validation-reports/extension-validation-report.md >> /tmp/validation-reports/validation-report.md
          else
            echo "❌ Extension validation report not generated" >> /tmp/validation-reports/validation-report.md
          fi
          if [ -f /tmp/validation-reports/validation-report.md ]; then
            cat /tmp/validation-reports/validation-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Validation report not generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: validation-reports
          path: |
            /tmp/validation-reports/validation-report.md
            /tmp/validation-reports/repository-structure-report.md
            /tmp/validation-reports/extension-validation-report.md
            /tmp/validation-reports/changed_files.txt
          retention-days: 30

      - name: Comment PR with report
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && always()
        uses: actions/github-script@e69ef5462fd455e02edcaf4dd7708eda96b9eda0 # v7.0.1
        with:
          script: |
            const fs = require('fs');

            // Check if validation report exists
            if (!fs.existsSync('/tmp/validation-reports/validation-report.md')) {
              console.log('Validation report not found');
              return;
            }

            const report = fs.readFileSync('/tmp/validation-reports/validation-report.md', 'utf8');

            // Find existing comment using the HTML comment marker
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.body.includes('<!-- extension-validation-report -->')
            );

            const commentBody = '<!-- extension-validation-report -->\n' +
              '# Extension Validation Report\n\n' +
              report + '\n\n' +
              '***\n' +
              '*This report was automatically generated by the Extension Validation workflow and it is updated automatically when files are modified.*';

            if (botComment) {
              console.log('Updating existing comment with ID:', botComment.id);
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              console.log('Creating new comment');
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Check validation results
        if: always()
        run: |
          echo "Checking validation results..."
          STRUCTURE_RESULT="${{ steps.structure-validation.outcome }}"
          EXTENSION_RESULT="${{ steps.extension-validation.outcome }}"

          echo "Repository structure validation: $STRUCTURE_RESULT"
          echo "Extension validation: $EXTENSION_RESULT"

          if [ "$STRUCTURE_RESULT" != "success" ] || [ "$EXTENSION_RESULT" != "success" ]; then
            echo "❌ One or more validation steps failed"
            exit 1
          else
            echo "✅ All validation steps passed"
          fi
